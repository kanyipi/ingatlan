filter(!is.na(price)) %>%
filter(!is.na(price_online)) %>%
filter( PRICETYPE == "Regular Price" )
# Check our newly created datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Check our newly created datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Drop obvious errors: price is larger than $1000
bpp <- bpp %>%
filter( price < 1000 )
# Check again our datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Histogram for filtered data
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue' ) +
labs(x = "Price",
y = "Count" )
# Play with the number of Bins
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue',
bins = 50 ) +
labs(x = "Price",
y = "Count" )
# Play with the number of binwidth
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue',
binwidth = 10 ) +
labs(x = "Price",
y = "Count" )
# Histogram - kernel density graph
ggplot( data = bpp ) +
geom_density( aes( x = price ) , color = 'blue'  , alpha = 0.1 ) +
geom_density( aes( x = price_online )  , color = 'red' , alpha = 0.1 ) +
labs(x = "Price",
y = "Relative Frequency" )
###
# Task
#   1) Do the same histogram, but now with the price differences
#   2) Add xlim(-5,5) command to ggplot! What changed?
ggplot( data = bpp ) +
geom_density( aes( x = p_diff ) , fill = 'blue' ) +
labs( x = 'Price Differences' ,
y = 'Relative Frequency' ) +
xlim( -1 , 1 ) +
ylim( 0 , 10 )
# Play around with the bandwidth
ggplot( data = bpp ) +
geom_density( aes( x = p_diff ) , fill = 'blue' ,
bw = 0.3 ) +
labs( x = 'Price Differences' ,
y = 'Relative Frequency' ) +
xlim( -10 , 10 )
# Check for price differences
chck <- bpp %>% filter( p_diff > 500 | p_diff < -500 )
# Drop them
bpp <- bpp %>% filter( p_diff < 500 & p_diff > -500 )
rm( chck )
######
## Creating factors in R
# tell R that they are nominal qualitative data
bpp$country <- factor( bpp$COUNTRY )
table(bpp$country)
# Two-ways to calculate the mean for each country:
datasummary( p_diff * country ~ Mean + SD + N , data = bpp )
# I show you how tidyverse works, while it produces tibbles, which can be used further!
bpp %>% select( country , p_diff ) %>%
group_by( country ) %>%
summarise( mean = mean( p_diff ) ,
sd = sd( p_diff ) ,
num_obs = n() )
# I show you how tidyverse works, while it produces tibbles, which can be used further!
bpp %>% select( country , p_diff ) %>%
group_by( country ) %>%
summarise( mean = mean( p_diff ) ,
sd = sd( p_diff ) ,
num_obs = n() )
# Create ggplot for countries: histogram
ggplot( data = bpp , aes( x = p_diff , fill = country ) ) +
geom_histogram( aes( y = ..density.. ), alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~country)+
xlim(-4,4)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
wide_assignment_data <- read_csv("assignment_1_data.csv")
longer_data <- wide_assignment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "ReactionTime") %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter",))
longer_data2 <- longer_data %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter",)) %>%
separate(col = "Condition", into = c("Expected", "Target"), sep = "_") %>%
mutate(Expected = factor(Expected), Target = factor(Target)) %>%
mutate(Expected = recode(Expected,
"ExpectedLetter" = "Letter",
"ExpectedNumber" = "Number")) %>%
mutate(Target = recode(Target,
"TargetLetter" = "Letter",
"TargetNumber" = "Number"))
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)+
xlim(-1,1)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)+
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(lattice)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
, y=ID
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=Condition, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ReactionTime
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=..count.., color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_barchart()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
longer_data
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)
View(longer_data)
View(longer_data)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
View(longer_data)
View(longer_data)
longer_data <- wide_assignment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "ReactionTime") %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter"))
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,asc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_line(size=2)+
geom_point(size=2)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target))
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency')
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
View(wide_assignment_data)
View(wide_assignment_data)
View(longer_data)
View(longer_data)
View(longer_data2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
csvname <- paste0("scrappednews.csv")
df <- read.csv(csvname, na.strings = c("", "NA"))
df <- df %>% subset(select = -X)
library(tidyverse)
df <- df %>% subset(select = -X)
df <- df %>% filter(huntext != "NA")
df <- df %>% filter(str_detect(date, "november"))
df <- df %>% mutate(year = substr(date, 1, 4))
chart_data <- df %>% mutate(year_type = paste(year, type))
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood")
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
chart_data <- df %>% mutate(year_type = paste(year, type))
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggsave("authorgood.png")
csvname <- paste0("scrappednews.csv")
df <- read.csv(csvname, na.strings = c("", "NA"))
df <- df %>% subset(select = -X)
df <- df %>% filter(huntext != "NA")
df <- df %>%
group_by(author) %>% mutate(counter=n())
View(df)
df <- df %>%
group_by(author) %>% mutate(counter=n()) %>% select(counter,author) %>% group_by(author) %>%
slice(1)
# install.packages(c("rvest", "data.table", "jsonlite"))
rm(list = ls())
library(rvest)
library(data.table)
library(tidyverse)
get_one_property <- function(url) {
t_list <- list()
t <- read_html(url)
t_list[["address"]] <- t %>%
html_nodes(".address") %>%
html_text() %>%
trimws()
t_list[["price"]] <- t %>%
html_nodes(".parameterTitleLink+ .parameterValues span") %>%
html_text()
t_list[["area"]] <- t %>%
html_nodes(".parameter:nth-child(2) span") %>%
html_text()
t_list[["noroom"]] <- t %>%
html_nodes(".parameter~ .parameter+ .parameter .parameterValues , .restricted") %>%
html_text()
t_list[["description"]] <- t %>%
html_nodes(".longDescription") %>%
html_text()
keys <- t %>%
html_nodes(".parameterName") %>%
html_text() %>%
trimws()
values <- t %>%
html_nodes(".parameterValue") %>%
html_text() %>%
trimws()
if (length(keys) == length(values)) {
for (i in 1:length(keys)) {
t_list[[keys[i]]] <- values[i]
}
}
return(t_list)
}
get_links_on_page <- function(url) {
t <- read_html(url)
rel_links <- t %>%
html_nodes(".listing__link") %>%
html_attr("href")
links <- paste0("https://ingatlan.com", rel_links)
return(links)
}
get_read_property <- function(nameofcsvs,linktoscrape,noofpagestoget=0,
batchsize=50,startbatchnumber=0) {
dir.create(nameofcsvs)
lastpagetext <- read_html(linktoscrape) %>%
html_nodes(".pagination__page-number") %>%
html_text() %>%
trimws()
lastpageno <- lastpagetext %>%
substr(2,nchar(lastpagetext)) %>%
parse_number()
if (noofpagestoget!=0) {
if (noofpagestoget < lastpageno) {
lastpageno <- noofpagestoget
}
}
lastpagebatch <- floor(lastpageno/batchsize)+1
for (i in startbatchnumber:lastpagebatch) {
print(paste("start", i))
si <- ((i * batchsize) + 1)
ei <- (((i + 1) * batchsize))
if (lastpageno < ei) {
ei <- lastpageno
}
links_to_get_links <- paste0(linktoscrape,"?page=", si:ei)
link_list <- sapply(links_to_get_links, get_links_on_page)
data_list <- list()
k <- 0
for (j in link_list) {
tryCatch(
{
oneproperty <- get_one_property(j)
k <- k + 1
},
error = function(e) {
print(e)
print(j)
}
)
if (length(oneproperty) > 1) {
data_list[[k]] <- oneproperty
}
# print(length(data_list))
}
df <- rbindlist(data_list, fill = T)
csvname <- paste0(nameofcsvs,"/",nameofcsvs, i, ".csv")
write.csv(df, csvname)
}
}
get_all_property <- function(nameofcsv) {
csv_list <- list.files(nameofcsv)
max_file_no <- 0
for (i in csv_list) {
fileno <- parse_number(i)
if (fileno>max_file_no) {
max_file_no <- fileno
}
}
houses <- read.csv(paste0(nameofcsv,"/",nameofcsv,"0.csv"))
df <- subset(houses, select = -Panelprogram)
for (i in 1:max_file_no) {
houses <- read.csv(paste0(nameofcsv,"/",nameofcsv, i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
return(df)
}
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
get_clean_all <- function(df) {
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
df <- df %>% mutate(price = elementlist(str_split(price, " "), 1))
df <- df %>% mutate(price=as.double(str_replace(price, ",", ".")))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
return(df)
}
scrapename <- "hungary"
setwd("~/GitHub/ingatlan")
df <- get_all_property(scrapename) %>% get_clean_all()
View(df)
styler:::style_active_file()
