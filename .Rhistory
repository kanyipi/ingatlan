library(kableExtra)
library(rvest)
# Get the data from my github repository
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
# Cleaning and data summary
# Helper function to get the nth element of a list
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area, " "), 1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
# this removes 34 observations
df <- df %>% filter(length(str_split(noroom, " ")[[1]]) != 2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom, "\\+")[[1]]) > 1, parse_integer(elementlist(str_split(noroom, " "), 3)), 0))
df <- df %>% mutate(noroom = as.numeric(elementlist(str_split(noroom, " "), 1)))
df <- df %>% mutate(noroom = as.double(noroom + (nohalfroom / 2)))
# convert condition to integer
df <- df %>%
mutate(condition = dplyr::recode(Ingatlan.állapota, "nincs megadva" = "NA", "befejezetlen" = "0", "felújítandó" = "1", "közepes állapotú" = "2", "jó állapotú" = "3", "felújított" = "4", "újszeru" = "5", "új építésu" = "6")) %>%
mutate(condition = as.numeric(condition))
# convert year built to integer
df <- df %>%
mutate(yearbuilt = dplyr::recode(Építés.éve, "nincs megadva" = "NA", "2001 és 2010 között" = "2010", "1950 elott" = "1950", "1950 és 1980 között" = "1980", "1981 és 2000 közöt" = "2000")) %>%
mutate(yearbuilt = as.numeric(yearbuilt))
return(df)
}
# filtering functions
get_filtered <- function(df, cols, price_filter_1 = 5, price_filter_2 = 300, area_filter_1 = 10, area_filter_2 = 250) {
# start n = 27874
# select needed columns drop observation if something is na
df <- df %>%
select(all_of(cols)) %>%
drop_na()
# n 18721
# filtering on prices
df <- df %>% filter(price_filter_1 < price && price < price_filter_2)
# n 18387
# filtering on sizes
df <- df %>% filter(area_filter_1 < area && area < area_filter_2)
# n 18343
return(df)
}
filter_cols <- c(
"price", "address", "area",
"noroom", "yearbuilt", "condition"
)
df <- df %>% get_clean() %>% get_filtered(filter_cols)
# Creating log values for price and size
df <- df %>% mutate(logprice = log(price))
df <- df %>% mutate(logarea = log(area))
# helper functions
P95 <- function(x) {
quantile(x, 0.95, na.rm = T)
}
P05 <- function(x) {
quantile(x, 0.05, na.rm = T)
}
#data summary
datasummary((`Price` = price) +
(`Size` = area) +
(`Number of Rooms` = noroom) +
(`Building Year` = yearbuilt) +
(`Condition` = condition) ~
Mean + Median + SD + Min + Max + P05 + P95,
data = df,
title = "Descriptive statistics"
) %>%
kable_styling(latex_options = c("HOLD_position", "scale_down"))
# reg1: NO control, simple linear regression both sides in logs
reg1 <- feols(logprice ~ logarea, data = df, vcov = "hetero")
# reg2: NO controls, use piecewise linear spline(P.L.S) with a knot at 4.5
reg2 <- feols(logprice ~ lspline(logarea, 4.5), data = df, vcov = "hetero")
# reg3: control for yearbuilt
reg3 <- feols(logprice ~ lspline(logarea, 4.5) + yearbuilt, data = df, vcov = "hetero")
# reg4: reg3 + noroom P.L.s knot at 4.5
reg4 <- feols(logprice ~ lspline(logarea, 4.5) + yearbuilt +
+lspline(noroom, 4), data = df, vcov = "hetero")
# reg5: reg4 + yearbuilt with P.L.S, knots at 2010 and condition
reg5 <- feols(logprice ~ lspline(logarea, 4.5) + lspline(yearbuilt, 2010) +
+lspline(noroom, 4) + condition, data = df, vcov = "hetero")
# Naming the coefficients for pretty output
alpha  <- round( reg5$coeftable[1,1] , 2 )
b1 <- round( reg5$coeftable[2,1] , 2 )
b2 <- round( reg5$coeftable[3,1] , 2 )
b3 <- round( reg5$coeftable[4,1] , 2 )
b4 <- round( reg5$coeftable[5,1] , 2 )
b5 <- round( reg5$coeftable[6,1] , 2 )
b6 <- round( reg5$coeftable[7,1] , 2 )
b7 <- round( reg5$coeftable[8,1] , 2 )
reg5$coeftable
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#TODO APPENDIx
#map
rm(list = ls())
# Libraries
library(AER)
library(tidyverse)
library(lspline)
library(fixest)
library(modelsummary)
library(ggpubr)
library(reshape2)
library(kableExtra)
library(rvest)
# Get the data from my github repository
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
integer <- c(NA,seq(0:6))
integer <- c(NA,seq(0:6))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#TODO APPENDIx
#map
rm(list = ls())
# Libraries
library(AER)
library(tidyverse)
library(lspline)
library(fixest)
library(modelsummary)
library(ggpubr)
library(reshape2)
library(kableExtra)
library(rvest)
# Get the data from my github repository
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
# Cleaning and data summary
# Helper function to get the nth element of a list
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area, " "), 1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
# this removes 34 observations
df <- df %>% filter(length(str_split(noroom, " ")[[1]]) != 2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom, "\\+")[[1]]) > 1, parse_integer(elementlist(str_split(noroom, " "), 3)), 0))
df <- df %>% mutate(noroom = as.numeric(elementlist(str_split(noroom, " "), 1)))
df <- df %>% mutate(noroom = as.double(noroom + (nohalfroom / 2)))
# convert condition to integer
df <- df %>%
mutate(condition = dplyr::recode(Ingatlan.állapota, "nincs megadva" = "NA", "befejezetlen" = "0", "felújítandó" = "1", "közepes állapotú" = "2", "jó állapotú" = "3", "felújított" = "4", "újszeru" = "5", "új építésu" = "6")) %>%
mutate(condition = as.numeric(condition))
# convert year built to integer
df <- df %>%
mutate(yearbuilt = dplyr::recode(Építés.éve, "nincs megadva" = "NA", "2001 és 2010 között" = "2010", "1950 elott" = "1950", "1950 és 1980 között" = "1980", "1981 és 2000 közöt" = "2000")) %>%
mutate(yearbuilt = as.numeric(yearbuilt))
return(df)
}
# filtering functions
get_filtered <- function(df, cols, price_filter_1 = 5, price_filter_2 = 300, area_filter_1 = 10, area_filter_2 = 250) {
# start n = 27874
# select needed columns drop observation if something is na
df <- df %>%
select(all_of(cols)) %>%
drop_na()
# n 18721
# filtering on prices
df <- df %>% filter(price_filter_1 < price && price < price_filter_2)
# n 18387
# filtering on sizes
df <- df %>% filter(area_filter_1 < area && area < area_filter_2)
# n 18343
return(df)
}
filter_cols <- c(
"price", "address", "area",
"noroom", "yearbuilt", "condition"
)
df <- df %>% get_clean() %>% get_filtered(filter_cols)
hungarian_condition <- c("nincs megadva", "befejezetlen", "felújítandó", "közepes állapotú" , "jó állapotú" , "felújított" , "újszeru" , "új építésu" )
english_condition <- c("NA", "not finished", "needs renovation", "mediocore condition" , "good condition" , "renovated" , "like new" , "newly built" )
integer <- c(NA,seq(0:6))
rbind(hungarian_condition,english_condition)
condition_map <- integer <- c(NA,seq(0:6))
condition_map <- rbind(hungarian_condition,english_condition)
condition_map <- as.dataframe(rbind(hungarian_condition,english_condition))
condition_map <- data.frame(rbind(hungarian_condition,english_condition))
condition_map <- condition_map %>% rbind(integer)
View(condition_map)
View(condition_map)
condition_map %>% kable()
condition_map
condition_map[1,3]
condition_map %>% kable()
condition_map[3,1]
condition_map[3,0]
condition_map[3,0] <- "Integer Value"
condition_map[3,0]
condition_map[3,0] <- "Integer Value"
condition_map[3,0][1] <- "Integer Value"
condition_map[3,0][[10]] <- "Integer Value"
condition_map <- data.frame(rbind(hungarian_condition,english_condition))
condition_map <- condition_map %>% rbind(integer,"Integer value")
condition_map %>% kable()
condition_map <- data.frame(rbind(hungarian_condition,english_condition,integer_value))
integer_value <- c(NA,seq(0:6))
condition_map <- data.frame(rbind(hungarian_condition,english_condition,integer_value))
condition_map %>% kable()
condition_map %>% kable(col.names = NULL)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#TODO APPENDIx
#map
rm(list = ls())
# Libraries
library(AER)
library(tidyverse)
library(lspline)
library(fixest)
library(modelsummary)
library(ggpubr)
library(reshape2)
library(kableExtra)
library(rvest)
# Get the data from my github repository
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
# Cleaning and data summary
# Helper function to get the nth element of a list
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area, " "), 1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
# this removes 34 observations
df <- df %>% filter(length(str_split(noroom, " ")[[1]]) != 2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom, "\\+")[[1]]) > 1, parse_integer(elementlist(str_split(noroom, " "), 3)), 0))
df <- df %>% mutate(noroom = as.numeric(elementlist(str_split(noroom, " "), 1)))
df <- df %>% mutate(noroom = as.double(noroom + (nohalfroom / 2)))
# convert condition to integer
df <- df %>%
mutate(condition = dplyr::recode(Ingatlan.állapota, "nincs megadva" = "NA", "befejezetlen" = "0", "felújítandó" = "1", "közepes állapotú" = "2", "jó állapotú" = "3", "felújított" = "4", "újszeru" = "5", "új építésu" = "6")) %>%
mutate(condition = as.numeric(condition))
# convert year built to integer
df <- df %>%
mutate(yearbuilt = dplyr::recode(Építés.éve, "nincs megadva" = "NA", "2001 és 2010 között" = "2010", "1950 elott" = "1950", "1950 és 1980 között" = "1980", "1981 és 2000 közöt" = "2000")) %>%
mutate(yearbuilt = as.numeric(yearbuilt))
return(df)
}
# filtering functions
get_filtered <- function(df, cols, price_filter_1 = 5, price_filter_2 = 300, area_filter_1 = 10, area_filter_2 = 250) {
# start n = 27874
# select needed columns drop observation if something is na
df <- df %>%
select(all_of(cols)) %>%
drop_na()
# n 18721
# filtering on prices
df <- df %>% filter(price_filter_1 < price && price < price_filter_2)
# n 18387
# filtering on sizes
df <- df %>% filter(area_filter_1 < area && area < area_filter_2)
# n 18343
return(df)
}
filter_cols <- c(
"price", "address", "area",
"noroom", "yearbuilt", "condition"
)
df <- df %>% get_clean() %>% get_filtered(filter_cols)
# Creating log values for price and size
df <- df %>% mutate(logprice = log(price))
df <- df %>% mutate(logarea = log(area))
# helper functions
P95 <- function(x) {
quantile(x, 0.95, na.rm = T)
}
P05 <- function(x) {
quantile(x, 0.05, na.rm = T)
}
#data summary
datasummary((`Price` = price) +
(`Size` = area) +
(`Number of Rooms` = noroom) +
(`Building Year` = yearbuilt) +
(`Condition` = condition) ~
Mean + Median + SD + Min + Max + P05 + P95,
data = df,
title = "Descriptive statistics"
) %>%
kable_styling(latex_options = c("HOLD_position", "scale_down"))
# price
p1 <- ggplot(df, aes(x = price)) +
geom_histogram(binwidth = 10, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Price of Properties on Sale in Budapest in Millions of HUF") +
theme_bw()
# size
p2 <- ggplot(df, aes(x = area)) +
geom_histogram(binwidth = 10, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Size of Properties on Sale in Budapest in m2") +
theme_bw()
association_figs <- ggarrange(p1, p2,
hjust = -0.6,
ncol = 2, nrow = 1
)
association_figs
chck_sp_normal <- function(df,x_var, x_lab="", y_lab="") {
varlist <- c("price", x_var)
df2 <- df %>%
group_by(!!!rlang::syms(varlist)) %>%
mutate(weight = n()) %>%
mutate(weight_2 = (weight / 1000))
ggplot(df2, aes(x = (!!!rlang::syms(x_var)), y = price)) +
geom_point(color = "red", size = 2, alpha = 0.6) +
geom_smooth(method = "loess", formula = y ~ x) +
labs(x = x_lab, y = y_lab) +
theme_bw()
}
chck_sp_log <- function(df,x_var, x_lab="", y_lab="") {
varlist <- c("logprice", x_var)
df2 <- df %>%
group_by(!!!rlang::syms(varlist)) %>%
mutate(weight = n()) %>%
mutate(weight_2 = (weight / 1000))
ggplot(df2, aes(x = (!!!rlang::syms(x_var)), y = logprice)) +
geom_point(color = "red", size = 2, alpha = 0.6) +
geom_smooth(method = "loess", formula = y ~ x) +
labs(x = x_lab, y = y_lab) +
theme_bw()
}
# Our main interest: student-to-teacher ratio:
p3 <- chck_sp_normal(df,"area", "", "Level Price")
p4 <- chck_sp_normal(df,"logarea")
p5 <- chck_sp_log(df,"area", " Level Size", "Log Price")
p6 <- chck_sp_log(df,"logarea", "Log Size")
association_figs2 <- ggarrange(p3, p4, p5, p6,
ncol = 2, nrow = 2
)
association_figs2
# reg1: NO control, simple linear regression both sides in logs
reg1 <- feols(logprice ~ logarea, data = df, vcov = "hetero")
# reg2: NO controls, use piecewise linear spline(P.L.S) with a knot at 4.5
reg2 <- feols(logprice ~ lspline(logarea, 4.5), data = df, vcov = "hetero")
# reg3: control for yearbuilt
reg3 <- feols(logprice ~ lspline(logarea, 4.5) + yearbuilt, data = df, vcov = "hetero")
# reg4: reg3 + noroom P.L.s knot at 4.5
reg4 <- feols(logprice ~ lspline(logarea, 4.5) + yearbuilt +
+lspline(noroom, 4), data = df, vcov = "hetero")
# reg5: reg4 + yearbuilt with P.L.S, knots at 2010 and condition
reg5 <- feols(logprice ~ lspline(logarea, 4.5) + lspline(yearbuilt, 2010) +
+lspline(noroom, 4) + condition, data = df, vcov = "hetero")
# Naming the coefficients for pretty output
alpha  <- round( reg5$coeftable[1,1] , 2 )
b1 <- round( reg5$coeftable[2,1] , 2 )
b2 <- round( reg5$coeftable[3,1] , 2 )
b3 <- round( reg5$coeftable[4,1] , 2 )
b4 <- round( reg5$coeftable[5,1] , 2 )
b5 <- round( reg5$coeftable[6,1] , 2 )
b6 <- round( reg5$coeftable[7,1] , 2 )
b7 <- round( reg5$coeftable[8,1] , 2 )
#
#Summarize our findings:
varname_report <- c("(Intercept)" = "Intercept",
"logarea" = "Log Size",
"lspline(logarea,4.5)1" = "Log Size (<4.5)",
"lspline(logarea,4.5)2" = "Log Size (>=4.5)",
"yearbuilt" = "Building Year",
"lspline(noroom,4)1" ="Number of Rooms < 4",
"lspline(noroom,4)2" ="Number of Rooms >= 4",
"lspline(yearbuilt,2010)1" = "Building Year <2010",
"lspline(yearbuilt,2010)2" = "Building Year >=2010",
"condition" = "Condition")
style_noHeaders = style.tex(var.title = "", fixef.title = "", stats.title = " ")
kable( etable( reg1 , reg2 , reg3 , reg4 , reg5 ,
title = 'Average Property Prices for Properties on Sale in Budapest',
dict = varname_report,
se.below = T,
coefstat = 'se',
fitstat = c('n','r2'),
se.row = F,
depvar = F ) ,
col.names = c('(1)','(2)','(3)','(4)','(5)'),
"latex", booktabs = TRUE,  position = "H",
caption = 'Models to uncover relation between Size of Properties and Price of Properties') %>% kable_styling(latex_options = c("hold_position","scale_down"))
hungarian_condition <- c("nincs megadva", "befejezetlen", "felújítandó", "közepes állapotú" , "jó állapotú" , "felújított" , "újszeru" , "új építésu" )
english_condition <- c("NA", "not finished", "needs renovation", "mediocore condition" , "good condition" , "renovated" , "like new" , "newly built" )
integer_value <- c(NA,seq(0:6))
condition_map <- data.frame(rbind(hungarian_condition,english_condition,integer_value))
condition_map %>% kable(col.names = NULL)
ap1 <- ggplot(df, aes(x = condition)) +
geom_histogram(binwidth = 10, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Condition of Properties on Sale in Budapest") +
theme_bw()
# s
ap2 <- ggplot(df, aes(x = yearbuilt)) +
geom_histogram(binwidth = 10, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Building Year ofProperties on Sale in Budapest in m2") +
theme_bw()
ap3 <- ggplot(df, aes(x = noroom)) +
geom_histogram(binwidth = 10, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Number of Rooms in Properties on Sale in Budapest in m2") +
theme_bw()
association_figs <- ggarrange(ap1, ap2, ap3,
ncol = 1, nrow = 3
)
association_figs
ap2
ap3
ap1 <- ggplot(df, aes(x = condition)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Condition of Properties on Sale in Budapest") +
theme_bw()
# s
ap2 <- ggplot(df, aes(x = yearbuilt)) +
geom_histogram(binwidth = 2, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Building Year of Properties on Sale in Budapest in m2") +
theme_bw()
ap3 <- ggplot(df, aes(x = noroom)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Number of Rooms in Properties on Sale in Budapest in m2") +
theme_bw()
association_figs <- ggarrange(ap1, ap2, ap3,
ncol = 1, nrow = 3
)
association_figs
ap1 <- ggplot(df, aes(x = condition)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Condition of Properties on Sale in Budapest") +
theme_bw()
ap2 <- ggplot(df, aes(x = noroom)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "", x = "Number of Rooms in Properties on Sale in Budapest in m2") +
theme_bw()
association_figs <- ggarrange(ap1, ap2, ap3,
ncol = 2, nrow = 1
)
association_figs
ap1 <- ggplot(df, aes(x = condition)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "Count", x = "Condition of Properties on Sale in Budapest") +
theme_bw() + xlim(0,7)
association_figs <- ggarrange(ap1, ap2, ap3,
ncol = 2, nrow = 1
)
association_figs
ap1
ap2 <- ggplot(df, aes(x = noroom)) +
geom_histogram(binwidth = 1, fill = "navyblue", color = "white") +
labs(y = "", x = "Number of Rooms in Properties on Sale in Budapest in m2") +
theme_bw()+ xlim(0,7)
association_figs <- ggarrange(ap1, ap2, ap3,
ncol = 2, nrow = 1
)
association_figs
association_figs <- ggarrange(ap1, ap2
ncol = 2, nrow = 1
styler:::style_active_file()
