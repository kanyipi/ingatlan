library(kableExtra)
# Get the data
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
df <- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
```
dftest <- df
# Helper function to get the nth element of a list
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# get the currency of the price
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
# get the double from the price
df <- df %>% mutate(price = elementlist(str_split(price, " "), 1))
df <- df %>% mutate(price = as.double(str_replace(price, ",", ".")))
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
return(df)
}
df2 <- get_clean(df)
View(df2)
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# get the currency of the price
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
# get the double from the price
df <- df %>% mutate(price = elementlist(str_split(price, " "), 1))
View(df)
df <- df %>% mutate(price = as.double(str_replace(price, ",", ".")))
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
df <- dftest
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# get the currency of the price
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
get_one_property <- function(url) {
t_list <- list()
t <- read_html(url)
t_list[["address"]] <- t %>%
html_nodes(".address") %>%
html_text() %>%
trimws()
t_list[["price"]] <- t %>%
html_nodes(".parameterTitleLink+ .parameterValues span") %>%
html_text()
t_list[["area"]] <- t %>%
html_nodes(".parameter:nth-child(2) span") %>%
html_text()
t_list[["noroom"]] <- t %>%
html_nodes(".parameter~ .parameter+ .parameter .parameterValues , .restricted") %>%
html_text()
t_list[["description"]] <- t %>%
html_nodes(".longDescription") %>%
html_text()
keys <- t %>%
html_nodes(".parameterName") %>%
html_text() %>%
trimws()
values <- t %>%
html_nodes(".parameterValue") %>%
html_text() %>%
trimws()
if (length(keys) == length(values)) {
for (i in 1:length(keys)) {
t_list[[keys[i]]] <- values[i]
}
}
return(t_list)
}
df_all<- read.csv("https://raw.githubusercontent.com/kanyipi/ingatlan/main/budapestall/budapestallfull.csv")
df <- dftest
View(df)
View(df)
View(df_all)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
return(df)
}
df2 <- get_clean(df)
View(df2)
p <- ggplot(df2, aes(x=price))+ geom_histogram(binwidth=10)
p
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
return(df)
}
df2 <- get_clean(df)
View(df_all)
df2$noroom
df2$Ingatlan.állapota
unique(df2$Ingatlan.állapota)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to boolean
# convert condition to integer
df <- df %>% mutate(condition = recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6"))
# convert year built to integer
return(df)
}
df2 <- get_clean(df)
?recode
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to boolean
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6"))
# convert year built to integer
return(df)
}
df2 <- get_clean(df)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to boolean
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6")) %>% mutate(condition=as.numeric(condition))
# convert year built to integer
return(df)
}
df2 <- get_clean(df)
unique(df2$Építés.éve)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to boolean
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6")) %>% mutate(condition=as.numeric(condition))
# convert year built to integer
df <- df %>% mutate(yearbuilt = dplyr::recode(Építés.éve,"nincs megadva"="NA","2001 és 2010 között"="2010","1950 elott"="1950","1950 és 1980 között"="1980","1981 és 2000 közöt"="2000")) %>%  mutate(yearbuilt=as.numeric(yearbuilt))
return(df)
}
df <- dftest
df2 <- get_clean(df)
df2 <- df2 %>% mutate(nohalfroom = parse_int(elementlist(str_split(noroom,"+")),2))
length(str_split(df2$noroom,"+"))
length(str_split("3","+"))
length(str_split("3"," + "))
length(str_split("3 + 2"," + "))
length(str_split("3 2"," + "))
str_split("3 2"," + ")
str_split("3 + 2"," + ")
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom," + "))>1,parse_int(elementlist(str_split(noroom,"+")),2)),0)
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom," + "))>1,parse_int(elementlist(str_split(noroom,"+")),2),0))
View(df2)
"
str_split("3 + 2"," + ")
str_split("3 + 2"," + ")
str_split("3 + 2","\\+")
length(str_split("3 + 2","\\+"))
length(str_split("3 + 2","\\+")[1])
str_split("3 + 2","\\+")[1]
length(str_split("3 + 2","\\+")[[1]])
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_int(elementlist(str_split(noroom,"+")),2),0))
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom,"+")),2),0))
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom,"+")),2),0))
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom,"\\+")),2),0))
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,1,0))
parse_integer(elementlist(str_split("1 + 1 fél","\\+")),2)
str_split("1 + 1 fél","\\+")
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom,"\\+"),2)),0))
elementlist(str_split("1 + 1 fél","\\+")),2
elementlist(str_split("1 + 1 fél","\\+"),2)
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))[1]
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))[row]
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))[0]
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))$row
parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2))
elementlist(parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2)),1)
elementlist(parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2)),2)
elementlist(parse_integer(elementlist(str_split("1 + 1 fél","\\+"),2)),3)
elementlist(str_split("1 + 1 fél","\\+"),2
elementlist(str_split("1 + 1 fél","\\+"),2)
elementlist(str_split("1 + 1 fél","\\+"),2)
elementlist(str_split("1 + 1 fél"," ")
elementlist(str_split("1 + 1 fél"," ")
str_split("1 + 1 fél"," ")
elementlist(str_split("1 + 1 fél"," "),3)
df2 <- df2 %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom," "),3)),0))
filter(df2,length(str_split(noroom," ")[[1]])=2)
filter(df2,length(str_split(noroom," ")[[1]])==2)
halfroom <-filter(df2,length(str_split(noroom," ")[[1]])==2)
View(halfroom)
View(halfroom)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
df <- df %>% filter(length(str_split(noroom," ")[[1]])!=2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom," "),3)),0))
df <- df %>% mutate(noroom =elementlist(str_split(noroom," ")),1)
df <- df %>% mutate(noroom = as.double(noroom+(nohalfroom/2)))
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6")) %>% mutate(condition=as.numeric(condition))
# convert year built to integer
df <- df %>% mutate(yearbuilt = dplyr::recode(Építés.éve,"nincs megadva"="NA","2001 és 2010 között"="2010","1950 elott"="1950","1950 és 1980 között"="1980","1981 és 2000 közöt"="2000")) %>%  mutate(yearbuilt=as.numeric(yearbuilt))
return(df)
}
df2 <- get_clean(df)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
df <- df %>% filter(length(str_split(noroom," ")[[1]])!=2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom," "),3)),0))
df <- df %>% mutate(noroom =elementlist(str_split(noroom," "),1))
df <- df %>% mutate(noroom = as.double(noroom+(nohalfroom/2)))
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6")) %>% mutate(condition=as.numeric(condition))
# convert year built to integer
df <- df %>% mutate(yearbuilt = dplyr::recode(Építés.éve,"nincs megadva"="NA","2001 és 2010 között"="2010","1950 elott"="1950","1950 és 1980 között"="1980","1981 és 2000 közöt"="2000")) %>%  mutate(yearbuilt=as.numeric(yearbuilt))
return(df)
}
df2 <- get_clean(df)
# Cleaning function
get_clean <- function(df) {
# remove X as it got created when joining the subfiles
df <- df %>% subset(select = -X)
# check for unique values for description and area,
# we need area as a couple of residental park propeties have the same
# description, but different area
df <- df %>%
group_by(description, area) %>%
slice(1)
# convert the eur prices into huf prices using real time conversion rate
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = as.double(ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price)))
# convert the area into integer
df <- df %>% mutate(area = (as.numeric(elementlist(str_split(area," "),1))))
# convert number of rooms to double
# filtering as there are some properties where there are no full rooms, or wrong data such as 540 m
df <- df %>% filter(length(str_split(noroom," ")[[1]])!=2)
df <- df %>% mutate(nohalfroom = ifelse(length(str_split(noroom,"\\+")[[1]])>1,parse_integer(elementlist(str_split(noroom," "),3)),0))
df <- df %>% mutate(noroom = as.numeric(elementlist(str_split(noroom," "),1)))
df <- df %>% mutate(noroom = as.double(noroom+(nohalfroom/2)))
# convert condition to integer
df <- df %>% mutate(condition = dplyr::recode(Ingatlan.állapota,"nincs megadva"="NA","befejezetlen"="0","felújítandó"="1","közepes állapotú"="2","jó állapotú"="3","felújított"="4","újszeru"="5","új építésu"="6")) %>% mutate(condition=as.numeric(condition))
# convert year built to integer
df <- df %>% mutate(yearbuilt = dplyr::recode(Építés.éve,"nincs megadva"="NA","2001 és 2010 között"="2010","1950 elott"="1950","1950 és 1980 között"="1980","1981 és 2000 közöt"="2000")) %>%  mutate(yearbuilt=as.numeric(yearbuilt))
return(df)
}
df2 <- get_clean(df)
View(df2)
top_n(df1,10,price)
top_n(df2,10,price)
low_n(df2,10,price)
df2 <- df2 %>% select( price , address, area,
noroom, yearbuilt, condition ) %>% drop_na()
cols <- c("price" , "address", "area",
"noroom", "yearbuilt", "condition")
#select needed columns drop observation if something is na
df2 <- df2 %>% select(cols ) %>% drop_na()
#select needed columns drop observation if something is na
df2 <- df2 %>% select(all_of(cols) ) %>% drop_na()
cols,price_filter_1=5, price_filter_2=300, area_filter_1=10,area_filter_2=250
price_filter_1=5
price_filter_2=300
area_filter_1=10
area_filter_2=250
df2 <- df2 %>% filter(price_filter_1< price && price < price_filter_2)
df2 <- df2 %>% filter(price_filter_1< price && price < price_filter_2)
df2 <- df2 %>% filter(area_filter_1< area && area < area_filter_2)
# filtering functions
get_filtered <- function(df,cols,price_filter_1=5, price_filter_2=300, area_filter_1=10,area_filter_2=250) {
# start n = 27874
# select needed columns drop observation if something is na
df <- df %>% select(all_of(cols) ) %>% drop_na()
# n 18721
df <- df %>% filter(price_filter_1< price && price < price_filter_2)
# n 18387
df2 <- df2 %>% filter(area_filter_1< area && area < area_filter_2)
# n 18343
return(df)
}
filter_cols<- c("price" , "address", "area",
"noroom", "yearbuilt", "condition")
df2 <- get_clean(df) %>% get_filtered(filter_cols)
P95 <- function(x){quantile(x,0.95,na.rm=T)}
P05 <- function(x){quantile(x,0.05,na.rm=T)}
