ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=..count.., color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_barchart()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
longer_data
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)
View(longer_data)
View(longer_data)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
View(longer_data)
View(longer_data)
longer_data <- wide_assignment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "ReactionTime") %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter"))
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,asc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_line(size=2)+
geom_point(size=2)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target))
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency')
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
View(wide_assignment_data)
View(wide_assignment_data)
View(longer_data)
View(longer_data)
View(longer_data2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
csvname <- paste0("scrappednews.csv")
df <- read.csv(csvname, na.strings = c("", "NA"))
df <- df %>% subset(select = -X)
library(tidyverse)
df <- df %>% subset(select = -X)
df <- df %>% filter(huntext != "NA")
df <- df %>% filter(str_detect(date, "november"))
df <- df %>% mutate(year = substr(date, 1, 4))
chart_data <- df %>% mutate(year_type = paste(year, type))
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood")
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
chart_data <- df %>% mutate(year_type = paste(year, type))
ggplot(chart_data, aes(x = factor(author), fill = author)) +
geom_histogram(stat = "count") +
facet_wrap(vars(type)) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
ggsave("authorgood.png")
ggsave("authorgood.png")
csvname <- paste0("scrappednews.csv")
df <- read.csv(csvname, na.strings = c("", "NA"))
df <- df %>% subset(select = -X)
df <- df %>% filter(huntext != "NA")
df <- df %>%
group_by(author) %>% mutate(counter=n())
View(df)
df <- df %>%
group_by(author) %>% mutate(counter=n()) %>% select(counter,author) %>% group_by(author) %>%
slice(1)
library(rvest)
library(data.table)
library(tidyverse)
get_one_property <- function(url) {
t_list <- list()
t <- read_html(url)
t_list[["address"]] <- t %>%
html_nodes(".address") %>%
html_text() %>%
trimws()
t_list[["price"]] <- t %>%
html_nodes(".parameterTitleLink+ .parameterValues span") %>%
html_text()
t_list[["area"]] <- t %>%
html_nodes(".parameter:nth-child(2) span") %>%
html_text()
t_list[["noroom"]] <- t %>%
html_nodes(".parameter~ .parameter+ .parameter .parameterValues , .restricted") %>%
html_text()
t_list[["description"]] <- t %>%
html_nodes(".longDescription") %>%
html_text()
keys <- t %>%
html_nodes(".parameterName") %>%
html_text() %>%
trimws()
values <- t %>%
html_nodes(".parameterValue") %>%
html_text() %>%
trimws()
if (length(keys) == length(values)) {
for (i in 1:length(keys)) {
t_list[[keys[i]]] <- values[i]
}
}
return(t_list)
}
get_links_on_page <- function(url) {
t <- read_html(url)
rel_links <- t %>%
html_nodes(".listing__link") %>%
html_attr("href")
links <- paste0("https://ingatlan.com", rel_links)
return(links)
}
get_read_property <- function(nameofcsvs,linktoscrape,noofpagestoget=0,
batchsize=50,startbatchnumber=0) {
dir.create(nameofcsvs)
lastpagetext <- read_html(linktoscrape) %>%
html_nodes(".pagination__page-number") %>%
html_text() %>%
trimws()
lastpageno <- lastpagetext %>%
substr(2,nchar(lastpagetext)) %>%
parse_number()
if (noofpagestoget!=0) {
if (noofpagestoget < lastpageno) {
lastpageno <- noofpagestoget
}
}
lastpagebatch <- floor(lastpageno/batchsize)+1
for (i in startbatchnumber:lastpagebatch) {
print(paste("start", i))
si <- ((i * batchsize) + 1)
ei <- (((i + 1) * batchsize))
if (lastpageno < ei) {
ei <- lastpageno
}
links_to_get_links <- paste0(linktoscrape,"?page=", si:ei)
link_list <- sapply(links_to_get_links, get_links_on_page)
data_list <- list()
k <- 0
for (j in link_list) {
tryCatch(
{
oneproperty <- get_one_property(j)
k <- k + 1
},
error = function(e) {
print(e)
print(j)
}
)
if (length(oneproperty) > 1) {
data_list[[k]] <- oneproperty
}
# print(length(data_list))
}
df <- rbindlist(data_list, fill = T)
csvname <- paste0(nameofcsvs,"/",nameofcsvs, i, ".csv")
write.csv(df, csvname)
}
}
get_all_property <- function(nameofcsv) {
csv_list <- list.files(nameofcsv)
max_file_no <- 0
for (i in csv_list) {
fileno <- parse_number(i)
if (fileno>max_file_no) {
max_file_no <- fileno
}
}
houses <- read.csv(paste0(nameofcsv,"/",nameofcsv,"0.csv"))
df <- subset(houses, select = -Panelprogram)
for (i in 1:max_file_no) {
houses <- read.csv(paste0(nameofcsv,"/",nameofcsv, i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
return(df)
}
elementlist <- function(lst, n) {
sapply(lst, `[`, n)
}
get_clean_all <- function(df) {
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
options(digits = 3)
df <- df %>% mutate(price = as.double(elementlist(str_split(price, " "), 1)))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3) %>%
strtoi()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
return(df)
}
scrapename <- "hungary"
df <- get_all_property(scrapename)
df <- get_all_property(scrapename)
setwd("~/GitHub/ingatlan")
df <- get_all_property(scrapename)
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
options(digits = 3)
df <- df %>% mutate(price = as.double(elementlist(str_split(price, " "), 1)))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3) %>%
strtoi()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
View(df)
View(df)
View(df)
df <- get_all_property(scrapename)
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
View(df)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
options(digits = 3)
df <- df %>% mutate(price = as.double(elementlist(str_split(price, " "), 1)))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3) %>%
strtoi()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
View(df)
df <- get_all_property(scrapename)
View(df)
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
View(df)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
df <- df %>% mutate(price = parse_number(price))
df
df <- get_all_property(scrapename)
df <- get_all_property(scrapename)
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
df <- df %>% mutate(price = parse_double(price))
View(df)
df <- get_all_property(scrapename)
df <- df %>% subset(select = -X)
df <- df %>%
group_by(description, area) %>%
slice(1)
df <- df %>% mutate(price_in_cur = elementlist(str_split(price, " "), 3))
df <- df %>% mutate(price_in_cur = ifelse(price_in_cur != "Ft", "EUR",
ifelse(price_in_cur == "Ft", "HUF", "other")
))
df <- df %>% mutate(price = (price))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3) %>%
strtoi()
View(df)
df <- df %>% mutate(price = elementlist(str_split(price, " "), 1))
df
summary(df)
df %>% mutate(price=as.double(price))
df2 <- df %>% mutate(price=as.double(price))
View(df2)
df2 <- df %>% mutate(price=str_replace(price, ",", "."))
View(df2)
df2 <- df %>% mutate(price=as.double(str_replace(price, ",", ".")))
View(df2)
df <- df %>% mutate(price=as.double(str_replace(price, ",", ".")))
conversiourl <- "https://www.xe.com/currencyconverter/convert/?Amount=1&From=EUR&To=HUF"
t <- read_html(conversiourl)
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3) %>%
strtoi()
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 3)
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 4)
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 5)
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 6)
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7)
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
strtd()
t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
eur_to_huf <- t %>%
html_nodes(".iGrAod") %>%
html_text() %>%
str_split(" ") %>%
elementlist(1) %>%
substr(1, 7) %>%
as.double()
df <- df %>% mutate(price = ifelse(price_in_cur == "EUR", price * eur_to_huf / 1000000, price))
View(df)
