# Get a better idea about price differences among different countries
datasummary( as.factor( COUNTRY )*p_diff ~ Mean + Median , data = bpp_orig )
# Create a factor instead
bpp_orig$COUNTRY <- as.factor( bpp_orig$COUNTRY )
datasummary( COUNTRY * ( p_diff + price + price_online ) ~ Mean + Median , data = bpp_orig )
# Different ordering
datasummary( ( COUNTRY * p_diff ) + ( COUNTRY * price  ) ~ Mean + Median , data = bpp_orig )
##
# Task
# 1) filter the data to 2016 and check price difference the mean and median for each country
#
datasummary( COUNTRY * p_diff ~ Mean + Median ,
data = filter( bpp_orig , year == 2016 ) )
# Add Range as an external function to the descriptive
# Our first function:
range_ds <- function( x )
{
max( x , na.rm = T ) - min( x , na.rm = T )
}
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 +
P75 + N + PercentMissing + range_ds ,
data = bpp_orig )
# Extra: create a function which gives you the mode:
mode_ds <- function(v){
uniqv <- unique( v )
uniqv[ which.max( tabulate( match( v, uniqv ) ) ) ]
}
datasummary( price + price_online + p_diff ~
Mean + Median + mode_ds , data = bpp_orig )
###
## VISUALIZATION
#
# Check for extreme values - use of Histograms:
#   simple - built in histogram
ggplot( data = bpp_orig ) +
geom_histogram( aes( x = price ) , fill = 'navyblue' ) +
labs(x = "Price",
y = "Count" )
##
# It is clear: need to filter out some data
# FILTER DATA -> filter for "PRICETYPE" is a too large restriction!
#     may check without that filter!
# use %>%  as a command which concatenates multiple commands!
# ctrl or cmd + shift + m
bpp <- bpp_orig %>%
filter( is.na(sale_online) ) %>%
filter(!is.na(price)) %>%
filter(!is.na(price_online)) %>%
filter( PRICETYPE == "Regular Price" )
# Check our newly created datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Check our newly created datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Drop obvious errors: price is larger than $1000
bpp <- bpp %>%
filter( price < 1000 )
# Check again our datatable:
datasummary( price + price_online + p_diff ~
Mean + Median + SD + Min + Max + P25 + P75 + N ,
data = bpp )
# Histogram for filtered data
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue' ) +
labs(x = "Price",
y = "Count" )
# Play with the number of Bins
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue',
bins = 50 ) +
labs(x = "Price",
y = "Count" )
# Play with the number of binwidth
ggplot( data = bpp ) +
geom_histogram( aes( x = price ) , fill = 'navyblue',
binwidth = 10 ) +
labs(x = "Price",
y = "Count" )
# Histogram - kernel density graph
ggplot( data = bpp ) +
geom_density( aes( x = price ) , color = 'blue'  , alpha = 0.1 ) +
geom_density( aes( x = price_online )  , color = 'red' , alpha = 0.1 ) +
labs(x = "Price",
y = "Relative Frequency" )
###
# Task
#   1) Do the same histogram, but now with the price differences
#   2) Add xlim(-5,5) command to ggplot! What changed?
ggplot( data = bpp ) +
geom_density( aes( x = p_diff ) , fill = 'blue' ) +
labs( x = 'Price Differences' ,
y = 'Relative Frequency' ) +
xlim( -1 , 1 ) +
ylim( 0 , 10 )
# Play around with the bandwidth
ggplot( data = bpp ) +
geom_density( aes( x = p_diff ) , fill = 'blue' ,
bw = 0.3 ) +
labs( x = 'Price Differences' ,
y = 'Relative Frequency' ) +
xlim( -10 , 10 )
# Check for price differences
chck <- bpp %>% filter( p_diff > 500 | p_diff < -500 )
# Drop them
bpp <- bpp %>% filter( p_diff < 500 & p_diff > -500 )
rm( chck )
######
## Creating factors in R
# tell R that they are nominal qualitative data
bpp$country <- factor( bpp$COUNTRY )
table(bpp$country)
# Two-ways to calculate the mean for each country:
datasummary( p_diff * country ~ Mean + SD + N , data = bpp )
# I show you how tidyverse works, while it produces tibbles, which can be used further!
bpp %>% select( country , p_diff ) %>%
group_by( country ) %>%
summarise( mean = mean( p_diff ) ,
sd = sd( p_diff ) ,
num_obs = n() )
# I show you how tidyverse works, while it produces tibbles, which can be used further!
bpp %>% select( country , p_diff ) %>%
group_by( country ) %>%
summarise( mean = mean( p_diff ) ,
sd = sd( p_diff ) ,
num_obs = n() )
# Create ggplot for countries: histogram
ggplot( data = bpp , aes( x = p_diff , fill = country ) ) +
geom_histogram( aes( y = ..density.. ), alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~country)+
xlim(-4,4)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
wide_assignment_data <- read_csv("assignment_1_data.csv")
longer_data <- wide_assignment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "ReactionTime") %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter",))
longer_data2 <- longer_data %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter",)) %>%
separate(col = "Condition", into = c("Expected", "Target"), sep = "_") %>%
mutate(Expected = factor(Expected), Target = factor(Target)) %>%
mutate(Expected = recode(Expected,
"ExpectedLetter" = "Letter",
"ExpectedNumber" = "Number")) %>%
mutate(Target = recode(Target,
"TargetLetter" = "Letter",
"TargetNumber" = "Number"))
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)+
xlim(-1,1)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)+
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(lattice)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
, y=ID
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=Condition, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ReactionTime
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' ) +
facet_wrap(~Condition)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=..count.., color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), color=Condition)) +
geom_barchart()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), fill=Condition)) +
geom_line()+
geom_point(color="red", size=2)
longer_data
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line()
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)
View(longer_data)
View(longer_data)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(color="red", size=2)
View(longer_data)
View(longer_data)
longer_data <- wide_assignment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "ReactionTime") %>%
mutate(Condition = recode(Condition,
"Condition1" = "ExpectedNumber_TargetNumber",
"Condition2" = "ExpectedNumber_TargetLetter",
"Condition3" = "ExpectedLetter_TargetNumber",
"Condition4" = "ExpectedLetter_TargetLetter"))
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ID, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,asc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
ggplot(data=longer_data, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Condition)) +
geom_line(size=2)+
geom_point(size=2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_line(size=2)+
geom_point(size=2)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target))
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency')
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank())
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(Expected)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
View(wide_assignment_data)
View(wide_assignment_data)
View(longer_data)
View(longer_data)
View(longer_data2)
View(longer_data2)
View(longer_data2)
ggplot(data=longer_data2, aes(x=reorder(ReactionTime,desc(ReactionTime)), y=ReactionTime, color=Target)) +
geom_point(size=3)+
labs( x = "Price" , y = 'Relative Frequency') +
theme(axis.text.x = element_blank()) +
facet_wrap(~Expected)
ggplot(data=longer_data, aes(x=ReactionTime, fill=Condition)) +
geom_density( aes( y = ..density.. ) , alpha =0.4 ) +
labs( x = "Price" , y = 'Relative Frequency' ,
fill = 'Country' )
styler:::style_active_file()
# install.packages(c("rvest", "data.table", "jsonlite"))
rm(list=ls())
library(rvest)
library(data.table)
get_one_house <- function(url) {
t_list <- list()
t <- read_html(url)
t_list[["address"]] <- t %>%
html_nodes(".address") %>%
html_text() %>%
trimws()
t_list[["price"]] <- t %>%
html_nodes(".parameterTitleLink+ .parameterValues span") %>%
html_text()
t_list[["area"]] <- t %>%
html_nodes(".parameter:nth-child(2) span") %>%
html_text()
t_list[["noroom"]] <- t %>%
html_nodes(".parameter~ .parameter+ .parameter .parameterValues , .restricted") %>%
html_text()
t_list[["description"]] <- t %>%
html_nodes(".longDescription") %>%
html_text()
keys <- t %>%
html_nodes(".parameterName") %>%
html_text() %>%
trimws()
values <- t %>%
html_nodes(".parameterValue") %>%
html_text() %>%
trimws()
if (length(keys) == length(values)) {
for (i in 1:length(keys)) {
t_list[[keys[i]]] <- values[i]
}
}
return(t_list)
}
get_links_on_page <- function(url) {
t <- read_html(url)
rel_links <- t %>%
html_nodes(".listing__link") %>%
html_attr("href")
links <- paste0("https://ingatlan.com", rel_links)
return(links)
}
## TODO FUNCTION AND I FOR LINKS
get_read_property <- function() {
for (i in 0:34) {
print(paste("start", i))
si <- ((i * 50) + 1)
se <- (((i + 1) * 50) + 1)
lastpageurl <- "https://ingatlan.com/lista/elado+lakas+budapest+ar-szerint"
t <- read_html(lastpageurl)
lastpage <- t %>%
html_nodes(".pagination__page-number") %>%
html_text() %>%
trimws() %>%
substr(5, 8) %>%
strtoi()
if (lastpage < se) {
se <- lastpage
}
links_to_get_links <- paste0("https://ingatlan.com/lista/elado+lakas+budapest+ar-szerint?page=", si:se)
link_list <- sapply(links_to_get_links, get_links_on_page)
data_list <- list()
k <- 0
for (j in link_list) {
tryCatch(
{
temphtml <- get_one_house(j)
k <- k + 1
},
error = function(e) {
print(e)
print(j)
}
)
if (length(temphtml) > 1) {
data_list[[k]] <- temphtml
}
# print(length(data_list))
}
df <- rbindlist(data_list, fill = T)
csvname <- paste0("budapest", i, ".csv")
write.csv(df, csvname)
}
}
get_all_property <- function() {
houses <- read.csv("budapest0.csv")
df <- subset(houses, select = -Panelprogram)
for (i in 1:34) {
houses <- read.csv(paste0("budapest", i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
}
setwd("~/GitHub/ECBS-5306-Coding-2-Web-Scraping-with-R/ingatlancom")
#get_read_property()
setwd("~/GitHub/ECBS-5306-Coding-2-Web-Scraping-with-R/ingatlancom")
get_all_property()
df <- get_all_property()
houses <- read.csv("budapest0.csv")
df <- subset(houses, select = -Panelprogram)
for (i in 1:34) {
houses <- read.csv(paste0("budapest", i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
allproperties <- get_all_property()
get_all_property()
df<- data.frame()
df <- get_all_property()
typeof(df)
houses <- read.csv("budapest0.csv")
df <- subset(houses, select = -Panelprogram)
for (i in 1:34) {
houses <- read.csv(paste0("budapest", i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
typeof(df)
df<- data.frame()
typeof(df)
get_all_property <- function() {
houses <- read.csv("budapest0.csv")
df <- subset(houses, select = -Panelprogram)
for (i in 1:34) {
houses <- read.csv(paste0("budapest", i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
return(df)
}
View(df)
houses <- read.csv("budapest0.csv")
df <- subset(houses, select = -Panelprogram)
for (i in 1:34) {
houses <- read.csv(paste0("budapest", i, ".csv"))
if (ncol(houses) == 27) {
houses <- subset(houses, select = -Panelprogram)
}
print(i)
df <- rbind(df, houses)
}
df
df <- get_all_property()
View(df)
View(df)
df <- subset(df, select = -X)
View(df)
View(df)
head(df)
